import axios from 'axios'
import cron from 'node-cron'
import TelegramBot from 'node-telegram-bot-api'
import dotenv from 'dotenv'
import pino from 'pino'
import {
  addSubscriber,
  removeSubscriber,
  getActiveSubscribers,
  isSubscribed,
  getStatistics,
  Subscriber
} from './database'

dotenv.config()

// Initialize logger
const logger = pino({
  transport: {
    target: 'pino-pretty',
    options: {
      colorize: false,
      translateTime: 'SYS:standard',
      ignore: 'pid,hostname'
    }
  }
})

// Validate configuration
function validateConfig() {
  const errors: string[] = []
  
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    errors.push('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env')
  }
  
  if (!process.env.DRUGS_TO_CHECK) {
    errors.push('DRUGS_TO_CHECK –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env')
  }
  
  if (!process.env.CRON_SCHEDULE) {
    errors.push('CRON_SCHEDULE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env')
  } else if (!cron.validate(process.env.CRON_SCHEDULE)) {
    errors.push(`CRON_SCHEDULE "${process.env.CRON_SCHEDULE}" –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π`)
  }
  
  if (errors.length > 0) {
    logger.error('–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:')
    errors.forEach(err => logger.error(`  - ${err}`))
    process.exit(1)
  }
  
  logger.info('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞')
}

validateConfig()

// Track API errors for retry
const apiErrorDrugs = new Set<string>()
let retryTimer: NodeJS.Timeout | null = null

// Initialize Telegram bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: true })
logger.info(`–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: ${process.env.TELEGRAM_BOT_TOKEN!.substring(0, 10)}...`)

// Log all incoming messages for debugging
bot.on('message', (msg) => {
  logger.debug(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from?.username || msg.from?.id}: ${msg.text}`)
})

// Command: /start - Subscribe to notifications
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id
  const user = msg.from
  
  logger.info(`–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user?.username || user?.id} (chat_id: ${chatId})`)
  
  if (!user) return
  
  const subscriber: Subscriber = {
    chatId,
    username: user.username,
    firstName: user.first_name,
    lastName: user.last_name
  }
  
  addSubscriber(subscriber)
  logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏`)
  
  await bot.sendMessage(chatId, 
    `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤!\n\n` +
    `–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏.\n\n` +
    `–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã:\n${(process.env.DRUGS_TO_CHECK || '–ü–µ–Ω—Ç–∞—Å–∞').split(',').map(d => `‚Ä¢ ${d.trim()}`).join('\n')}\n\n` +
    `–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop`
  )
  logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`)
})

// Command: /stop - Unsubscribe from notifications
bot.onText(/\/stop/, async (msg) => {
  const chatId = msg.chat.id
  const user = msg.from
  
  logger.info(`–ö–æ–º–∞–Ω–¥–∞ /stop –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user?.username || user?.id} (chat_id: ${chatId})`)
  
  const wasSubscribed = removeSubscriber(chatId)
  
  if (wasSubscribed) {
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –æ—Ç–ø–∏—Å–∞–ª—Å—è`)
    await bot.sendMessage(chatId, 
      `‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n` +
      `–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start`
    )
  } else {
    logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω`)
    await bot.sendMessage(chatId, 
      `‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏`
    )
  }
})

// Command: /status - Check subscription status
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id
  const user = msg.from
  const subscribed = isSubscribed(chatId)
  
  logger.info(`–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user?.username || user?.id} (chat_id: ${chatId}) - ${subscribed ? '–ø–æ–¥–ø–∏—Å–∞–Ω' : '–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω'}`)
  
  if (subscribed) {
    await bot.sendMessage(chatId, 
      `‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
      `–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã:\n${(process.env.DRUGS_TO_CHECK || '–ü–µ–Ω—Ç–∞—Å–∞').split(',').map(d => `‚Ä¢ ${d.trim()}`).join('\n')}`
    )
  } else {
    await bot.sendMessage(chatId, 
      `‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏`
    )
  }
})

interface DrugCheckResult {
  isAvailable: boolean
  pharmacyCount?: number
  pharmacies?: any[]
}

// Check drug availability using API
async function checkDrug(drugName: string): Promise<DrugCheckResult> {
  logger.info(`–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞: ${drugName}`)
  
  try {
    const response = await axios.get('https://gorzdrav.spb.ru/_api/api/v2/medication/pharmacies/search', {
      params: {
        nom: drugName.toLowerCase(),
        isLgot: true
      },
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Referer': 'https://gorzdrav.spb.ru/pharm-drug-search?tab=lgot'
      },
      timeout: 30000
    })
    
    logger.info(`API –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${response.status}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if (response.data && response.data.success === false) {
      logger.error(`API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.data.message}`)
      logger.error(`–ö–æ–¥ –æ—à–∏–±–∫–∏: ${response.data.errorCode}, RequestId: ${response.data.requestId}`)
      throw new Error(`API Error: ${response.data.message}`)
    }
    
    if (response.data && response.data.success && response.data.result) {
      const pharmacies = response.data.result
      const isAvailable = pharmacies.length > 0
      
      if (isAvailable) {
        logger.info(`${drugName}: –ù–ê–ô–î–ï–ù –≤ ${pharmacies.length} –∞–ø—Ç–µ–∫–∞—Ö`)
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 –∞–ø—Ç–µ–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        pharmacies.slice(0, 3).forEach((pharmacy: any, index: number) => {
          logger.info(`  ${index + 1}. ${pharmacy.storeName} (${pharmacy.storeDistrict}): ${pharmacy.drugName}`)
        })
      } else {
        logger.info(`${drugName}: –ù–ï –ù–ê–ô–î–ï–ù`)
      }
      
      return {
        isAvailable,
        pharmacyCount: pharmacies.length,
        pharmacies: pharmacies.slice(0, 3) // –ü–µ—Ä–≤—ã–µ 3 –∞–ø—Ç–µ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      }
    } else {
      logger.error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API`, response.data)
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API')
    }
  } catch (error: any) {
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
      logger.error(`API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π –¥–ª—è ${drugName}: ${error.response.status}`)
      logger.error(`–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:`, error.response.data)
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      logger.error(`–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –¥–ª—è ${drugName}`)
    } else {
      // –ß—Ç–æ-—Ç–æ –µ—â–µ
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ ${drugName}:`, error.message)
    }
    throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }
}

// Send notification to all subscribers
async function sendNotificationToSubscribers(drugName: string, result: DrugCheckResult) {
  const subscribers = getActiveSubscribers()
  
  logger.info(`–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ "${drugName}" (${result.isAvailable ? '–í –ù–ê–õ–ò–ß–ò–ò' : '–ù–ï–¢ –≤ –Ω–∞–ª–∏—á–∏–∏'})`)
  
  if (subscribers.length === 0) {
    logger.info(`–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)
    return
  }
  
  let message = ''
  
  if (result.isAvailable && result.pharmacyCount && result.pharmacies) {
    message = `‚úÖ <b>–ü—Ä–µ–ø–∞—Ä–∞—Ç "${drugName}" –ï–°–¢–¨ –í –ù–ê–õ–ò–ß–ò–ò!</b>\n\n` +
      `üè• –ù–∞–π–¥–µ–Ω –≤ <b>${result.pharmacyCount}</b> –∞–ø—Ç–µ–∫–∞—Ö –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞\n\n` +
      `üìç –ë–ª–∏–∂–∞–π—à–∏–µ –∞–ø—Ç–µ–∫–∏:\n`
    
    result.pharmacies.forEach((pharmacy: any, index: number) => {
      message += `${index + 1}. <b>${pharmacy.storeName}</b>\n` +
        `   üìç ${pharmacy.storeAddress} (${pharmacy.storeDistrict})\n` +
        `   üïê ${pharmacy.storeWorkingTime.split(' ').slice(0, 4).join(' ')}\n` +
        `   üíä ${pharmacy.drugName}\n\n`
    })
    
    message += `üîó <a href="https://gorzdrav.spb.ru/pharm-drug-search?tab=lgot">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–ø—Ç–µ–∫–∏</a>`
  } else {
    message = `‚ùå <b>–ü—Ä–µ–ø–∞—Ä–∞—Ç "${drugName}" –ù–ï–¢ –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n` +
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–µ–ø–∞—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–ø—Ç–µ–∫–∞—Ö –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞.\n\n` +
      `üîó <a href="https://gorzdrav.spb.ru/pharm-drug-search?tab=lgot">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</a>`
  }
  
  let successCount = 0
  let errorCount = 0
  
  for (const subscriber of subscribers) {
    try {
      await bot.sendMessage(subscriber.chatId, message, { 
        parse_mode: 'HTML',
        disable_web_page_preview: true 
      })
      successCount++
      logger.info(`‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriber.chatId} (${subscriber.username || '–±–µ–∑ username'})`)
    } catch (error) {
      errorCount++
      logger.error(`‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscriber.chatId}:`, error)
      // If bot was blocked by user, deactivate subscription
      if (error instanceof Error && error.message.includes('bot was blocked')) {
        removeSubscriber(subscriber.chatId)
        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${subscriber.chatId} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)`)
      }
    }
  }
  
  logger.info(`–ò—Ç–æ–≥–æ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${errorCount}`)
}

// Flag to prevent concurrent checks
let isChecking = false

// Check all drugs
async function checkAllDrugs() {
  // Prevent concurrent execution
  if (isChecking) {
    logger.warn(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—é...`)
    return
  }
  
  isChecking = true
  
  try {
    const drugs = (process.env.DRUGS_TO_CHECK || '–ü–µ–Ω—Ç–∞—Å–∞').split(',').map(d => d.trim())
    const activeSubscribers = getActiveSubscribers()
    
    logger.info(`=== –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ ===`)
    logger.info(`–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${drugs.join(', ')}`)
    logger.info(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${activeSubscribers.length}`)
    
    for (let i = 0; i < drugs.length; i++) {
      const drug = drugs[i]
      try {
        const result = await checkDrug(drug)
        logger.info(`${drug}: ${result.isAvailable ? '–í –ù–ê–õ–ò–ß–ò–ò' : '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}`)
        
        // Always send notification for each drug
        await sendNotificationToSubscribers(drug, result)
        logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${drug}`)
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${drug}:`, error)
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        logger.warn(`–ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${drug} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API`)
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        apiErrorDrugs.add(drug)
      }
    }
    
    logger.info(`=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===`)
    
    // Schedule retry for drugs with API errors
    scheduleRetryForErrors()
  } finally {
    isChecking = false
  }
}

// Handle bot errors
bot.on('polling_error', (error) => {
  logger.error(`Telegram bot polling error:`, error)
})

// Log when bot is ready
bot.on('polling', () => {
  logger.info(`Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`)
})

// Get bot info on start
bot.getMe().then((botInfo) => {
  logger.info(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${botInfo.username} (id: ${botInfo.id})`)
}).catch((error) => {
  logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:`, error)
})

// Function to retry failed drugs
function scheduleRetryForErrors() {
  if (apiErrorDrugs.size > 0) {
    // Cancel existing retry timer if any
    if (retryTimer) {
      clearTimeout(retryTimer)
    }
    
    logger.info(`–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è ${apiErrorDrugs.size} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É`)
    
    retryTimer = setTimeout(async () => {
      if (apiErrorDrugs.size > 0) {
        logger.info(`–ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${Array.from(apiErrorDrugs).join(', ')}`)
        const drugsToRetry = Array.from(apiErrorDrugs)
        apiErrorDrugs.clear() // Clear the set before retry
        
        for (const drug of drugsToRetry) {
          try {
            const result = await checkDrug(drug)
            logger.info(`${drug}: ${result.isAvailable ? '–í –ù–ê–õ–ò–ß–ò–ò' : '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}`)
            await sendNotificationToSubscribers(drug, result)
            logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${drug}`)
          } catch (error) {
            logger.error(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${drug}:`, error)
            logger.warn(`–ü—Ä–µ–ø–∞—Ä–∞—Ç ${drug} –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é`)
          }
        }
      }
    }, 60000) // 1 minute
  }
}

// Check if --check-now flag is passed
if (process.argv.includes('--check-now')) {
  logger.info('–ó–∞–ø—É—Å–∫–∞—é —Ä–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...')
  checkAllDrugs().then(() => {
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    // Don't exit, keep bot running
  }).catch(error => {
    logger.error('–û—à–∏–±–∫–∞:', error)
  })
} else {
  // Start cron job
  const schedule = process.env.CRON_SCHEDULE!
  const stats = getStatistics()
  
  logger.info('===================================')
  logger.info('–ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤')
  logger.info(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${schedule}`)
  logger.info(`–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${process.env.DRUGS_TO_CHECK!}`)
  logger.info(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: –í—Å–µ–≥–æ ${stats.total_count}, –ê–∫—Ç–∏–≤–Ω—ã—Ö ${stats.active_count}, –û—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è ${stats.inactive_count}`)
  logger.info('===================================')
  logger.info('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...')
  
  cron.schedule(schedule, () => {
    logger.info(`CRON: –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é`)
    checkAllDrugs()
  })
  
  // Run check immediately on start
  logger.info(`–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...`)
  checkAllDrugs()
}
